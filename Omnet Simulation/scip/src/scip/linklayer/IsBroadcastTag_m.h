//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/scip/linklayer/IsBroadcastTag.msg.
//

#ifndef __SCIP_ISBROADCASTTAG_M_H
#define __SCIP_ISBROADCASTTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace scip {

class IsBroadcastTag;

}  // namespace scip

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace scip {

/**
 * Class generated from <tt>src/scip/linklayer/IsBroadcastTag.msg:13</tt> by opp_msgtool.
 * <pre>
 * class IsBroadcastTag extends inet::TagBase
 * {
 *     bool isBoradcast = true; // a locally unique (network node) identifier that determines the interface registered in the ~InterfaceTable
 * }
 * </pre>
 */
class IsBroadcastTag : public ::inet::TagBase
{
  protected:
    bool isBoradcast_ = true;

  private:
    void copy(const IsBroadcastTag& other);

  protected:
    bool operator==(const IsBroadcastTag&) = delete;

  public:
    IsBroadcastTag();
    IsBroadcastTag(const IsBroadcastTag& other);
    virtual ~IsBroadcastTag();
    IsBroadcastTag& operator=(const IsBroadcastTag& other);
    virtual IsBroadcastTag *dup() const override {return new IsBroadcastTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool isBoradcast() const;
    virtual void setIsBoradcast(bool isBoradcast);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IsBroadcastTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IsBroadcastTag& obj) {obj.parsimUnpack(b);}


}  // namespace scip


namespace omnetpp {

template<> inline scip::IsBroadcastTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<scip::IsBroadcastTag*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SCIP_ISBROADCASTTAG_M_H

