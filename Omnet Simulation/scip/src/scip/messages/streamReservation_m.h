//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/scip/messages/streamReservation.msg.
//

#ifndef __SCIP_STREAMRESERVATION_M_H
#define __SCIP_STREAMRESERVATION_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace scip {

class TalkerGroupMsg;
class ListenerGroupMsg;
class StatusGroupMsg;

}  // namespace scip


namespace scip {

/**
 * Class generated from <tt>src/scip/messages/streamReservation.msg:11</tt> by opp_msgtool.
 * <pre>
 * //
 * // Represents a stream reservation message
 * //
 * message TalkerGroupMsg
 * {
 *     // Stream ID
 *     uint64_t macAdress;
 *     uint16_t uniqueID;
 *    	// Stream Rank
 *     uint8_t streamRank;
 *     // EndStationInterfaces
 *     uint64_t sendAdress;
 *     string interfaceName;
 *     // DataFrameSpecification
 *     uint32_t srcAddr;
 *     uint32_t dstAddr;
 *     unsigned short srcPort;
 *     unsigned short dstPort;
 *     uint8_t l4Proto;
 *     // TrafficSpecification
 *     float interval;
 *     uint16_t maxFramesPerInterval;
 *     uint16_t maxFrameSize;
 *     uint8_t transmissionSelection;
 *     // UserToNetworkRequirements
 *     uint8_t numSeamlessTrees;
 *     uint32_t maxLatency;
 * }
 * </pre>
 */
class TalkerGroupMsg : public ::omnetpp::cMessage
{
  protected:
    uint64_t macAdress = 0;
    uint16_t uniqueID = 0;
    uint8_t streamRank = 0;
    uint64_t sendAdress = 0;
    ::omnetpp::opp_string interfaceName;
    uint32_t srcAddr = 0;
    uint32_t dstAddr = 0;
    unsigned short srcPort = 0;
    unsigned short dstPort = 0;
    uint8_t l4Proto = 0;
    float interval = 0;
    uint16_t maxFramesPerInterval = 0;
    uint16_t maxFrameSize = 0;
    uint8_t transmissionSelection = 0;
    uint8_t numSeamlessTrees = 0;
    uint32_t maxLatency = 0;

  private:
    void copy(const TalkerGroupMsg& other);

  protected:
    bool operator==(const TalkerGroupMsg&) = delete;

  public:
    TalkerGroupMsg(const char *name=nullptr, short kind=0);
    TalkerGroupMsg(const TalkerGroupMsg& other);
    virtual ~TalkerGroupMsg();
    TalkerGroupMsg& operator=(const TalkerGroupMsg& other);
    virtual TalkerGroupMsg *dup() const override {return new TalkerGroupMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint64_t getMacAdress() const;
    virtual void setMacAdress(uint64_t macAdress);

    virtual uint16_t getUniqueID() const;
    virtual void setUniqueID(uint16_t uniqueID);

    virtual uint8_t getStreamRank() const;
    virtual void setStreamRank(uint8_t streamRank);

    virtual uint64_t getSendAdress() const;
    virtual void setSendAdress(uint64_t sendAdress);

    virtual const char * getInterfaceName() const;
    virtual void setInterfaceName(const char * interfaceName);

    virtual uint32_t getSrcAddr() const;
    virtual void setSrcAddr(uint32_t srcAddr);

    virtual uint32_t getDstAddr() const;
    virtual void setDstAddr(uint32_t dstAddr);

    virtual unsigned short getSrcPort() const;
    virtual void setSrcPort(unsigned short srcPort);

    virtual unsigned short getDstPort() const;
    virtual void setDstPort(unsigned short dstPort);

    virtual uint8_t getL4Proto() const;
    virtual void setL4Proto(uint8_t l4Proto);

    virtual float getInterval() const;
    virtual void setInterval(float interval);

    virtual uint16_t getMaxFramesPerInterval() const;
    virtual void setMaxFramesPerInterval(uint16_t maxFramesPerInterval);

    virtual uint16_t getMaxFrameSize() const;
    virtual void setMaxFrameSize(uint16_t maxFrameSize);

    virtual uint8_t getTransmissionSelection() const;
    virtual void setTransmissionSelection(uint8_t transmissionSelection);

    virtual uint8_t getNumSeamlessTrees() const;
    virtual void setNumSeamlessTrees(uint8_t numSeamlessTrees);

    virtual uint32_t getMaxLatency() const;
    virtual void setMaxLatency(uint32_t maxLatency);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TalkerGroupMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TalkerGroupMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/scip/messages/streamReservation.msg:37</tt> by opp_msgtool.
 * <pre>
 * // Omits UserToNetworkRequirements and InterfaceCapabilities for simplicity
 * message ListenerGroupMsg
 * {
 *     // Stream ID
 *     uint64_t macAdress;
 *     uint16_t uniqueID;
 *     // EndStationInterfaces
 *     string interfaceName;
 *     uint64_t recvAdress;
 * }
 * </pre>
 */
class ListenerGroupMsg : public ::omnetpp::cMessage
{
  protected:
    uint64_t macAdress = 0;
    uint16_t uniqueID = 0;
    ::omnetpp::opp_string interfaceName;
    uint64_t recvAdress = 0;

  private:
    void copy(const ListenerGroupMsg& other);

  protected:
    bool operator==(const ListenerGroupMsg&) = delete;

  public:
    ListenerGroupMsg(const char *name=nullptr, short kind=0);
    ListenerGroupMsg(const ListenerGroupMsg& other);
    virtual ~ListenerGroupMsg();
    ListenerGroupMsg& operator=(const ListenerGroupMsg& other);
    virtual ListenerGroupMsg *dup() const override {return new ListenerGroupMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint64_t getMacAdress() const;
    virtual void setMacAdress(uint64_t macAdress);

    virtual uint16_t getUniqueID() const;
    virtual void setUniqueID(uint16_t uniqueID);

    virtual const char * getInterfaceName() const;
    virtual void setInterfaceName(const char * interfaceName);

    virtual uint64_t getRecvAdress() const;
    virtual void setRecvAdress(uint64_t recvAdress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ListenerGroupMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ListenerGroupMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/scip/messages/streamReservation.msg:49</tt> by opp_msgtool.
 * <pre>
 * // TODO: Missing InterfaceConfiguration and FailedIntefaces
 * // For simplicity, passes streamRank as single parameter
 * // Response group from CNC
 * message StatusGroupMsg
 * {
 *     // Stream ID
 *     uint64_t macAdress;
 *     uint16_t uniqueID;
 *     // Status Info
 *     uint8_t talkerStatus;
 *     uint8_t listenerStatus;
 *     uint8_t failureCode;
 *     // Accumulated Latency
 *     uint32_t accumulatedLatency;
 *     // Should be InterfaceConfiguration but is only PCP and VLAN ID for simplicity
 *     uint8_t pcp;
 *     uint16_t vlanID;
 * }
 * </pre>
 */
class StatusGroupMsg : public ::omnetpp::cMessage
{
  protected:
    uint64_t macAdress = 0;
    uint16_t uniqueID = 0;
    uint8_t talkerStatus = 0;
    uint8_t listenerStatus = 0;
    uint8_t failureCode = 0;
    uint32_t accumulatedLatency = 0;
    uint8_t pcp = 0;
    uint16_t vlanID = 0;

  private:
    void copy(const StatusGroupMsg& other);

  protected:
    bool operator==(const StatusGroupMsg&) = delete;

  public:
    StatusGroupMsg(const char *name=nullptr, short kind=0);
    StatusGroupMsg(const StatusGroupMsg& other);
    virtual ~StatusGroupMsg();
    StatusGroupMsg& operator=(const StatusGroupMsg& other);
    virtual StatusGroupMsg *dup() const override {return new StatusGroupMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint64_t getMacAdress() const;
    virtual void setMacAdress(uint64_t macAdress);

    virtual uint16_t getUniqueID() const;
    virtual void setUniqueID(uint16_t uniqueID);

    virtual uint8_t getTalkerStatus() const;
    virtual void setTalkerStatus(uint8_t talkerStatus);

    virtual uint8_t getListenerStatus() const;
    virtual void setListenerStatus(uint8_t listenerStatus);

    virtual uint8_t getFailureCode() const;
    virtual void setFailureCode(uint8_t failureCode);

    virtual uint32_t getAccumulatedLatency() const;
    virtual void setAccumulatedLatency(uint32_t accumulatedLatency);

    virtual uint8_t getPcp() const;
    virtual void setPcp(uint8_t pcp);

    virtual uint16_t getVlanID() const;
    virtual void setVlanID(uint16_t vlanID);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StatusGroupMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StatusGroupMsg& obj) {obj.parsimUnpack(b);}


}  // namespace scip


namespace omnetpp {

template<> inline scip::TalkerGroupMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<scip::TalkerGroupMsg*>(ptr.get<cObject>()); }
template<> inline scip::ListenerGroupMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<scip::ListenerGroupMsg*>(ptr.get<cObject>()); }
template<> inline scip::StatusGroupMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<scip::StatusGroupMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SCIP_STREAMRESERVATION_M_H

