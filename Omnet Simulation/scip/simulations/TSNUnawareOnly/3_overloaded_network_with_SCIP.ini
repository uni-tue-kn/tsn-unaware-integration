[General]
network = TSNUnawareOnly
record-eventlog = false

sim-time-limit = 1s

# Load Source application
*.loadSource*.numApps = 1
*.loadSource*.app[0].typename = "UdpBasicBurst"
*.loadSource*.app[0].destAddresses = "loadSink"
*.loadSource*.app[0].destPort = 1000
*.loadSource*.app[0].localPort = 1025
*.loadSource*.app[0].messageLength = 1196B
*.loadSource*.app[0].dontFragment = true
*.loadSource*.app[0].startTime = 90ms
# Increase from 50ms to 100ms
*.loadSource*.app[0].burstDuration = 150ms
*.loadSource*.app[0].sleepDuration = 200ms
*.loadSource*.app[0].sendInterval = 10us
*.loadSource*.app[0].chooseDestAddrMode = "once"

# Load Sink applications
*.loadSink*.numApps = 1
*.loadSink*.app[0].typename = "UdpSink"
*.loadSink*.app[0].display-name = "network load"
#*.*Sink.app[1].display-name = "video"
*.loadSink*.app[0].localPort = 1000
#*.*Sink.app[1].io.localPort = 1001

# TSN Unaware Traffic
# Source
## VoIP Source
*.tsnUnawareSource.numApps = 1
*.tsnUnawareSource.app[0].typename = "SimpleVoipSender"
*.tsnUnawareSource.app[0].packetName = "TSNUnawareVoIP"
*.tsnUnawareSource.app[0].destAddress = "tsnUnawareSink"
*.tsnUnawareSource.app[0].destPort = 1000
*.tsnUnawareSource.app[0].localPort = 1025

# Sinkl
## VoIP Sink
*.tsnUnawareSink.numApps = 1
*.tsnUnawareSink.app[0].typename = "SimpleVoipReceiver"
*.tsnUnawareSink.app[0].localPort = 1000


# Fill ARP tables automatically without sending ARP packets
*.*.ipv4.arp.typename = "GlobalArp"
*.*.ipv4.routingTable.netmaskRoutes = ""

# Recording
# Mak sure that the hosts calculated the CRC, otherwise the recording will fail
**.crcMode = "computed"
**.fcsMode = "computed"
#*.tsnUnawareSource.udp.crcMode = "disabled"

# Configure TSN-Unaware stream in SCIP
# This is required since the simulation cannot determine which switches have to add a VLAN tag
#  and which one to remove it.
# Hence, the switch configurator needs to have a static conf.
*.scip.lifecycleManager.streams = [{srcIP: "10.0.0.1", dstIP: "10.0.0.5", srcPort: 1025, dstPort: 1000, l4Proto: 17, uniqueID: 100, name: "TsnUnaware"}]
*.scip.switchConfigurator.streams = [{uniqueID: 100, switches: [1, 2]}]
*.cnc.streams = [{uniqueID: 100, vlanID: 0, pcp: 4}]
# Threshold before a stream is classified and integrated
*.scip.lifecycleManager.packetThreshold = 20

# Configuration for Interaction SCIP <--> switches
*.scip.numSwitches = 2
*.switch1.scipInterfaceModule.switchID = 0
*.switch2.scipInterfaceModule.switchID = 1
*.switch*.hasOutgoingStreams = true

# Configure TSN mechanisms for the TSNUnaware stream
# enable egress traffic shaping
*.switch*.hasEgressTrafficShaping = true

# credit based traffic shaping
*.switch*.eth[*].macLayer.queue.numTrafficClasses = 2
*.switch*.eth[*].macLayer.queue.*[0].display-name = "best effort"
*.switch*.eth[*].macLayer.queue.*[1].display-name = "TsnUnaware"
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].typename = "Ieee8021qCreditBasedShaper"
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].idleSlope = 97Mbps # Channel data rate
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].idleSlope = 3Mbps # Channel data rate




