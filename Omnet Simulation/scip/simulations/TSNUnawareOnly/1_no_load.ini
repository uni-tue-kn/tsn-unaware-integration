[General]
network = TSNUnawareOnly
record-eventlog = true

# Load Source application
*.loadSource*.numApps = 1
*.loadSource*.app[0].typename = "UdpSourceApp"
*.loadSource*.app[0].display-name = "best effort"
#*.*Source.app[1].display-name = "video"
*.loadSource*.app[*].io.destAddress = "loadSink"
*.loadSource*.app[0].io.destPort = 1000
#*.*Source.app[1].io.destPort = 1001
*.loadSource*.app[0].source.packetLength = 1000B
*.loadSource*.app[0].source.productionInterval = exponential(500us)
#*.*Source.app[1].source.productionInterval = exponential(400us)

# Load Sink applications
*.loadSink*.numApps = 1
*.loadSink*.app[0].typename = "UdpSinkApp"
*.loadSink*.app[0].display-name = "best effort"
#*.*Sink.app[1].display-name = "video"
*.loadSink*.app[0].io.localPort = 1000
#*.*Sink.app[1].io.localPort = 1001

# TSN Unaware Traffic
# Source
*.tsnUnawareSource.numApps = 1
*.tsnUnawareSource.app[0].typename = "UdpSourceApp"
*.tsnUnawareSource.app[0].display-name = "TSNUnaware"
*.tsnUnawareSource.app[0].io.destAddress = "tsnUnawareSink"
*.tsnUnawareSource.app[0].io.destPort = 1000
*.tsnUnawareSource.app[0].source.packetLength = 1000B
*.tsnUnawareSource.app[0].source.productionInterval = exponential(50us)
# Sinkl
*.tsnUnawareSink.numApps = 1
*.tsnUnawareSink.app[0].typename = "UdpSinkApp"
*.tsnUnawareSink.app[0].display-name = "best effort"
*.tsnUnawareSink.app[0].io.localPort = 1000

#*.switch1.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 1000)},
#                                                        {stream: "video", packetFilter: expr(udp.destPort == 1001)}]



# Fill ARP tables automatically without sending ARP packets
*.*.ipv4.arp.typename = "GlobalArp"
*.*.ipv4.routingTable.netmaskRoutes = ""

# Recording
# Mak sure that the hosts calculated the CRC, otherwise the recording will fail
**.crcMode = "computed"
**.fcsMode = "computed"

# Configure TSN-Unaware stream in SCIP
# This is required since the simulation cannot determine which switches have to add a VLAN tag
#  and which one to remove it.
# Hence, the switch configurator needs to have a static conf.
*.scip.lifecycleManager.streams = [{srcIP: "10.0.0.1", dstIP: "10.0.0.5", srcPort: 1025, dstPort: 1000, l4Proto: 17, uniqueID: 100, name: "TsnUnaware1"}]
*.scip.switchConfigurator.streams = [{uniqueID: 100, switches: [1, 2]}]
*.cnc.streams = [{uniqueID: 100, vlanID: 0, pcp: 4}]
# Threshold before a stream is classified and integrated
*.scip.lifecycleManager.packetThreshold = 2

# Configuration for Interaction SCIP <--> switches
*.scip.numSwitches = 2
*.switch1.scipInterfaceModule.switchID = 0
*.switch2.scipInterfaceModule.switchID = 1
*.switch*.hasOutgoingStreams = true


